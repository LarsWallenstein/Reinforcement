{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Cross-entropy on cartpole","version":"0.3.2","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"metadata":{"id":"mLPmtzrIN_Xd","colab_type":"code","colab":{}},"cell_type":"code","source":["import gym\n","from collections import namedtuple\n","import numpy as np\n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"o9y_YGdcOSR0","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":190},"outputId":"924554b8-4663-4eea-8fcc-0a39490df701","executionInfo":{"status":"ok","timestamp":1555100719854,"user_tz":-180,"elapsed":8764,"user":{"displayName":"Alex Korsakov","photoUrl":"","userId":"18248625518508782982"}}},"cell_type":"code","source":["!pip install tensorboardX"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Collecting tensorboardX\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/5c/76/89dd44458eb976347e5a6e75eb79fecf8facd46c1ce259bad54e0044ea35/tensorboardX-1.6-py2.py3-none-any.whl (129kB)\n","\u001b[K    100% |████████████████████████████████| 133kB 6.0MB/s \n","\u001b[?25hRequirement already satisfied: numpy in /usr/local/lib/python3.6/dist-packages (from tensorboardX) (1.16.2)\n","Requirement already satisfied: protobuf>=3.2.0 in /usr/local/lib/python3.6/dist-packages (from tensorboardX) (3.7.1)\n","Requirement already satisfied: six in /usr/local/lib/python3.6/dist-packages (from tensorboardX) (1.11.0)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.6/dist-packages (from protobuf>=3.2.0->tensorboardX) (40.9.0)\n","Installing collected packages: tensorboardX\n","Successfully installed tensorboardX-1.6\n"],"name":"stdout"}]},{"metadata":{"id":"CvpPfs6_ObhT","colab_type":"code","colab":{}},"cell_type":"code","source":["from tensorboardX import SummaryWriter"],"execution_count":0,"outputs":[]},{"metadata":{"id":"cOXM7ZmVOfrr","colab_type":"code","colab":{}},"cell_type":"code","source":["import torch\n","import torch.nn as nn\n","import torch.optim as optim"],"execution_count":0,"outputs":[]},{"metadata":{"id":"LksaO5eAOoDr","colab_type":"code","colab":{}},"cell_type":"code","source":["HIDDEN_SIZE = 128\n","BATCH_SIZE = 16\n","PERCENTILE = 70"],"execution_count":0,"outputs":[]},{"metadata":{"id":"bNDR0fwbPAtj","colab_type":"code","colab":{}},"cell_type":"code","source":["class Net(nn.Module):\n","  def __init__(self, obs_size, hidden_size, n_actions):\n","    super(Net, self).__init__()\n","    self.net = nn.Sequential(\n","        nn.Linear(obs_size,hidden_size),#Входной слой\n","        nn.ReLU(),\n","        nn.Linear(hidden_size, n_actions)\n","    )\n","    \n","  def forward(self, x):\n","    return self.net(x)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"j57ZriksP0oa","colab_type":"code","colab":{}},"cell_type":"code","source":["Episode = namedtuple('Episode', field_names=['reward', 'steps'])\n","EpisodeStep = namedtuple('EpisodeStep', field_names=['observation', 'action'])"],"execution_count":0,"outputs":[]},{"metadata":{"id":"G7iL7a6fRHua","colab_type":"code","colab":{}},"cell_type":"code","source":["def iterate_batches(env, net, batch_size):\n","  batch = []\n","  episode_reward = 0.0\n","  episode_steps = []\n","  obs = env.reset()\n","  sm = nn.Softmax(dim = 1)\n","  while True:\n","    obs_v = torch.FloatTensor([obs])\n","    act_probs_v = sm(net(obs_v))\n","    act_probs = act_probs_v.data.numpy()[0]\n","    action = np.random.choice(len(act_probs), p = act_probs)#выбираем действие на основе распределения вероятностей над совокупностью действий\n","    next_obs, reward, is_done, _ = env.step(action)\n","    episode_reward += reward\n","    episode_steps.append(EpisodeStep(observation = obs, action = action))\n","    if is_done:\n","      batch.append(Episode(reward = episode_reward, steps = episode_steps))\n","      episode_reward = 0.0\n","      episode_steps = []\n","      next_obs = env.reset()\n","      if(len(batch)==batch_size):\n","        yield batch\n","        batch = []\n","    obs =  next_obs"],"execution_count":0,"outputs":[]},{"metadata":{"id":"5fJ4dwnpUSH5","colab_type":"code","colab":{}},"cell_type":"code","source":["def filter_batch(batch, percentile):\n","  \n","  rewards = list(map(lambda s: s.reward, batch))\n","  reward_bound = np.percentile(rewards, percentile)\n","  reward_mean = float(np.mean(rewards))\n","  \n","  train_obs = []#на вход для тренировки\n","  train_act = []#лэйблы на выходе\n","  \n","  for example in batch:\n","    if example.reward < reward_bound:\n","      continue\n","    train_obs.extend(map(lambda step: step.observation, example.steps))\n","    train_act.extend(map(lambda step: step.action, example.steps))\n","    \n","  train_obs_v = torch.FloatTensor(train_obs)\n","  train_act_v = torch.LongTensor(train_act)\n","  \n","  return train_obs_v, train_act_v, reward_bound, reward_mean"],"execution_count":0,"outputs":[]},{"metadata":{"id":"C9KY985fWfXR","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":850},"outputId":"1b17c4dd-95c2-4596-bcc4-7ea27a5198f2","executionInfo":{"status":"ok","timestamp":1555104048699,"user_tz":-180,"elapsed":38909,"user":{"displayName":"Alex Korsakov","photoUrl":"","userId":"18248625518508782982"}}},"cell_type":"code","source":["if __name__ == \"__main__\":\n","  env = gym.make(\"CartPole-v0\")\n","  \n","  obs_size = env.observation_space.shape[0]\n","  n_actions = env.action_space.n\n","  \n","  net = Net(obs_size, HIDDEN_SIZE, n_actions)\n","  objective = nn.CrossEntropyLoss()\n","  optimizer = optim.Adam(params=net.parameters(), lr=0.01)\n","  writer = SummaryWriter(comment=\"cartpole\")\n","  \n","  for iter_no, batch in enumerate(iterate_batches(env, net, BATCH_SIZE)):\n","    obs_v, acts_v, reward_b, reward_m = filter_batch(batch, PERCENTILE)\n","    optimizer.zero_grad()\n","    action_scores_v = net(obs_v)\n","    loss_v = objective(action_scores_v, acts_v)\n","    loss_v.backward()\n","    optimizer.step()\n","    print(\"%d: loss=%.3f, reward_mean=%.1f, reward_bound=%.1f\" % (\n","            iter_no, loss_v.item(), reward_m, reward_b))\n","    writer.add_scalar(\"loss\",loss_v.item(), iter_no)\n","    writer.add_scalar(\"reward_bound\",reward_b,iter_no)\n","    writer.add_scalar(\"reward_mean\",reward_m, iter_no)\n","    if (reward_m>199):\n","      print(\"Solved!\")\n","      break\n","  writer.close()"],"execution_count":35,"outputs":[{"output_type":"stream","text":["0: loss=0.697, reward_mean=19.8, reward_bound=22.5\n","1: loss=0.679, reward_mean=24.8, reward_bound=30.0\n","2: loss=0.647, reward_mean=26.3, reward_bound=32.0\n","3: loss=0.641, reward_mean=25.9, reward_bound=32.0\n","4: loss=0.624, reward_mean=36.5, reward_bound=42.0\n","5: loss=0.604, reward_mean=48.1, reward_bound=52.0\n","6: loss=0.592, reward_mean=51.4, reward_bound=54.5\n","7: loss=0.585, reward_mean=64.1, reward_bound=74.0\n","8: loss=0.602, reward_mean=56.4, reward_bound=54.0\n","9: loss=0.562, reward_mean=53.4, reward_bound=64.5\n","10: loss=0.570, reward_mean=53.8, reward_bound=63.0\n","11: loss=0.556, reward_mean=62.7, reward_bound=77.0\n","12: loss=0.560, reward_mean=64.1, reward_bound=72.5\n","13: loss=0.517, reward_mean=70.0, reward_bound=80.0\n","14: loss=0.510, reward_mean=65.6, reward_bound=70.0\n","15: loss=0.561, reward_mean=68.2, reward_bound=80.0\n","16: loss=0.518, reward_mean=72.0, reward_bound=79.5\n","17: loss=0.532, reward_mean=75.8, reward_bound=89.5\n","18: loss=0.523, reward_mean=87.2, reward_bound=95.0\n","19: loss=0.508, reward_mean=76.2, reward_bound=73.5\n","20: loss=0.503, reward_mean=87.5, reward_bound=102.5\n","21: loss=0.516, reward_mean=80.4, reward_bound=90.0\n","22: loss=0.496, reward_mean=88.4, reward_bound=100.5\n","23: loss=0.510, reward_mean=88.7, reward_bound=114.5\n","24: loss=0.498, reward_mean=94.2, reward_bound=115.5\n","25: loss=0.497, reward_mean=108.1, reward_bound=120.0\n","26: loss=0.497, reward_mean=121.4, reward_bound=152.5\n","27: loss=0.523, reward_mean=151.8, reward_bound=167.0\n","28: loss=0.517, reward_mean=148.1, reward_bound=169.0\n","29: loss=0.470, reward_mean=152.9, reward_bound=167.0\n","30: loss=0.503, reward_mean=159.4, reward_bound=200.0\n","31: loss=0.501, reward_mean=139.1, reward_bound=157.5\n","32: loss=0.508, reward_mean=162.2, reward_bound=192.5\n","33: loss=0.511, reward_mean=150.8, reward_bound=161.5\n","34: loss=0.490, reward_mean=160.2, reward_bound=199.0\n","35: loss=0.489, reward_mean=154.7, reward_bound=164.0\n","36: loss=0.502, reward_mean=175.4, reward_bound=200.0\n","37: loss=0.492, reward_mean=171.9, reward_bound=200.0\n","38: loss=0.489, reward_mean=178.1, reward_bound=200.0\n","39: loss=0.503, reward_mean=190.4, reward_bound=200.0\n","40: loss=0.491, reward_mean=186.9, reward_bound=200.0\n","41: loss=0.488, reward_mean=194.0, reward_bound=200.0\n","42: loss=0.488, reward_mean=196.3, reward_bound=200.0\n","43: loss=0.496, reward_mean=191.2, reward_bound=200.0\n","44: loss=0.497, reward_mean=190.8, reward_bound=200.0\n","45: loss=0.495, reward_mean=194.7, reward_bound=200.0\n","46: loss=0.484, reward_mean=197.4, reward_bound=200.0\n","47: loss=0.486, reward_mean=199.8, reward_bound=200.0\n","Solved!\n"],"name":"stdout"}]},{"metadata":{"id":"1Ph23k59ZwFI","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]}]}